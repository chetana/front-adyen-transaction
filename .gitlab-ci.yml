stages:
  - install
  - lint
  - build
  - test
  - docker
  - deploy

variables:
  NODE_VERSION: "22"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache pour accélérer les builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - server/node_modules/
    - .yarn/cache/

# Installation des dépendances
install:
  stage: install
  image: node:${NODE_VERSION}-alpine
  script:
    - echo "📦 Installation des dépendances..."
    - yarn install --frozen-lockfile
    - cd server && npm ci
  artifacts:
    paths:
      - node_modules/
      - server/node_modules/
    expire_in: 1 hour

# Vérification du code
lint:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install
  script:
    - echo "🔍 Vérification du code..."
    - yarn lint
    - yarn prettier:check
  only:
    - merge_requests
    - main
    - develop

# Compilation
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install
  script:
    - echo "🏗️  Compilation de l'application..."
    - yarn build
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  only:
    - merge_requests
    - main
    - develop

# Tests (à implémenter)
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install
  script:
    - echo "🧪 Lancement des tests..."
    - yarn test || echo "⚠️  Aucun test configuré"
  only:
    - merge_requests
    - main
    - develop

# Construction de l'image Docker
docker:build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🐳 Construction de l'image Docker..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Déploiement en développement
deploy:dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEV_SERVER_HOST >> ~/.ssh/known_hosts
  script:
    - echo "🚀 Déploiement en développement..."
    - ssh $DEV_SERVER_USER@$DEV_SERVER_HOST "
        cd /opt/adyen-transaction &&
        docker-compose pull &&
        docker-compose --env-file .env.docker up -d &&
        docker-compose logs --tail=50
      "
  environment:
    name: development
    url: https://dev-adyen-transaction.example.com
  only:
    - develop
  when: manual

# Déploiement en production
deploy:prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_SERVER_HOST >> ~/.ssh/known_hosts
  script:
    - echo "🚀 Déploiement en production..."
    - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "
        cd /opt/adyen-transaction &&
        docker-compose pull &&
        docker-compose --env-file .env.docker up -d &&
        docker-compose logs --tail=50
      "
  environment:
    name: production
    url: https://adyen-transaction.example.com
  only:
    - main
  when: manual